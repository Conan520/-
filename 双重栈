class DoubleStack:
    arr = [0] * 100
    l_top = -1
    r_top = len(arr)


sta = DoubleStack()


def l_push(x):
    if sta.r_top - sta.l_top == 1:
        print("栈满，无法插入")
        exit(0)
    else:
        sta.l_top = sta.l_top + 1
        sta.arr[sta.l_top] = x


def l_pop():
    if sta.l_top == -1:
        print("左栈空")
        exit(0)
    else:
        x = sta.arr[sta.l_top]
        sta.l_top = sta.l_top-1
        return x


def r_push(x):
    if sta.r_top - sta.l_top == 1:
        print("栈满，无法插入")
        exit(0)
    else:
        sta.r_top = sta.r_top -1
        sta.arr[sta.r_top] = x


def r_pop():
    if sta.r_top == len(sta.arr):
        print("右栈空")
        exit(0)
    else:
        x = sta.arr[sta.r_top]
        sta.r_top = sta.r_top + 1
        return x


if __name__ == "__main__":
    l_push(6)
    l_push(87)
    x1 = l_pop()
    x2 = l_pop()
    print(x1, x2)

    r_push(34)
    r_push(57)
    x3 = r_pop()
    x4 = r_pop()
    print(x3, x4)
     
     
  
  
  
  
  
